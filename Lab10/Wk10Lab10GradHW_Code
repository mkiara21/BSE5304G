dir.create("~/Wk10Lab10")
setwd("~/Wk10Lab10/")
list.files(all.files = T)
objects()   # Should be empty.
#
#
if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr,EcoHydRology,curl,elevatr,raster,rgdal,
                 data.table,foreign,maptools,dataRetrieval,gdistance)
setwd("~/Wk10Lab10/")
#
# Note we have a new library to access USGS Waterdata
# https://owi.usgs.gov/R/dataRetrieval.html
# https://owi.usgs.gov/R/training-curriculum/usgs-packages/dataRetrieval-readNWIS/
#

#
# Need to figure out which data to download. 
# https://nwis.waterdata.usgs.gov/nwis/pmcodes?radio_pm_search=param_group&pm_group=All+--+include+all+parameter+groups&pm_search=&casrn_search=&srsname_search=&format=html_table&show=parameter_group_nm&show=parameter_nm&show=casrn&show=srsname&show=parameter_units
# 
##############################################
# 0205551460 LICK RUN ABOVE PATTON AVENUE AT ROANOKE, VA
##############################################
make_usgs_gage_list=function(siteNo = "0205551460",
parameterCd = c("00060","00065"),
start.date = "2017-05-01",  # Not frozen to not frozen
end.date = "2017-11-01"    # to still not frozen
){
  
USGSlist=list()   # Organize the data in a nice list as in previous labs
USGSlist[["flowdata"]]<- readNWISuv(siteNumbers = siteNo,parameterCd = parameterCd,startDate = start.date,endDate = end.date)
head(USGSlist$flowdata)  # Note that we have 00060 and 00065...
#  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
#1  	USGS list 2017-05-01 04:00:00      	6.38            	A
#2  	USGS list 2017-05-01 04:05:00      	6.38            	A
#  X_00065_00000 X_00065_00000_cd tz_cd
#1      	2.74            	A   UTC
#2      	2.74            	A   UTC
#
# And of course we want to work in SI units so:
USGSlist$flowdata$depth_m=USGSlist$flowdata$X_00065_00000*0.3048
# m/ft depth
USGSlist$flowdata$cms=USGSlist$flowdata$X_00060_00000*.02832
# m3/ft3 flow
#
# Let's add in the USGS gage site information to the list and inspect
USGSlist[["site"]]=readNWISsite(siteNo)
head(USGSlist$site)
class(USGSlist$site$dec_lat_va)
#
# Set the Manning Coefficient in the USGS Gage's Site Table
#
USGSlist$site$man_n=.035/1.49
#
# Create a SpatialPointsDataFrame out of the site dataframe in the USGS list
coordinates(USGSlist$site)=~dec_long_va+dec_lat_va
#
return(USGSlist)
}

USGS07032000=make_usgs_gage_list(siteNo = "07032000")
USGS07031650=make_usgs_gage_list(siteNo ="07031650" )
USGS07031740=make_usgs_gage_list(siteNo ="07031740" )
USGS07031692=make_usgs_gage_list(siteNo ="07031692" )

ab_ll=rbind(USGS07032000$site,
              USGS07031650$site,
              USGS07031740$site,
              USGS07031692$site)
class(ab_ll)
ab_ll@proj4string
proj4_utm = paste0("+proj=utm +zone=",
                     trunc((180+coordinates(USGS07031740$site)[1])/6+1), 
                     " +datum=WGS84 +units=m +no_defs")
print(proj4_utm)
# Lat/Lon (_ll) is much easier!
proj4_ll = "+proj=longlat"
crs_ll=CRS(proj4_ll)
crs_utm=CRS(proj4_utm)
proj4string(ab_ll)=proj4_ll
ab_utm=spTransform(ab_ll,crs_utm)
ab_utm@coords
mydem=get_aws_terrain(locations=ab_utm@coords, 
                        z = 12, prj = proj4_utm,expand=1)
#
# Lets plot the DEM and the gage locations so we can guess 
# what gages connect with what gages
#
plot(mydem)
plot(ab_utm,add=T)
text(ab_utm, labels=ab_utm@data$site_no, cex=0.6, font=2,pos=1)
# From Lab02, I know I can get an overview of streams with the 
# USGS H
url="https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/HU8/HighResolution/Shape/NHD_H_03010101_HU8_Shape.zip"
curl_download(url,"NHD_H_03010101_HU8_Shape.zip")
unzip("NHD_H_03010101_HU8_Shape.zip",exdir="03010101")
streams=readOGR("03010101/Shape/NHDFlowline.dbf")
streams_utm=spTransform(streams,crs_utm)
plot(streams_utm,col="blue",add=T)
zoom(mydem)



#############################################################################
#
A=SpatialPoints(USGS07031650$site)# Up gradient site Lick Run
B=SpatialPoints(USGS07032000$site) # Down gradient site ROA River atNiagara
proj4string(A)=proj4_ll
proj4string(B)=proj4_ll
A_utm=spTransform(A,crs_utm)
B_utm=spTransform(B,crs_utm)
# Cut the DEM down to a more manageable size
cropmydem=raster::crop(mydem,raster::extend(extent(ab_utm),600))
cropmydem=raster::trim(cropmydem)
cropmydem=cropmydem*1000.0
plot(cropmydem)
plot(ab_utm,add=T)
# Set up the weighting functions
altDiff <- function(x){x[2] - x[1]}
hd <- transition(cropmydem, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- raster::adjacent(cropmydem, cells=1:ncell(cropmydem), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
# Find and plot the flow path
AtoB <- shortestPath(Conductance, A_utm, B_utm, output="SpatialLines")
plot(AtoB,add=T)
plot(streams_utm,col="blue",add=T)
plot(AtoB,add=T)
SpatialLinesLengths(AtoB)
USGS07031650$site$L=SpatialLinesLengths(AtoB) # km to m
USGS07031650$site$L # reach length in m
#
#
# Getting slope, we will extract the slope for points A and B from the DEM and # divide the difference by the length in m, this gives us a much better 
# estimate of slope than taking the point slopes at the gage site
#
USGS07031650$site$slope=(raster::extract(mydem,A_utm)-
                             raster::extract(mydem,B_utm))/USGS07031650$site$L
USGS07031650$site$slope


# So now we have flow depth (y "$depth_m"), manning's n ("$man_n"), Q ("$cms"), and slope ("$slope") rearrange to solve for B
# B=(n*Q)/(y^(5/3)*sqrt(So))
USGS07031650$flowdata$B=(USGS07031650$site$man_n*USGS07031650$flowdata$cms)/
  (USGS07031650$flowdata$depth_m^(5/3)*sqrt(USGS07031650$site$slope))
head(USGS07031650$flowdata)
#  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
#1  	USGS 05267000 2017-05-01 04:00:00      	6.38            	A
#2  	USGS 05267000 2017-05-01 04:05:00      	6.38            	A
#  X_00065_00000 X_00065_00000_cd tz_cd   	cms  depth_m    	B
#1      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#2      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#
# Lets look at how B changes with flow.    
plot(USGS07031650$flowdata$dateTime,USGS07031650$flowdata$B, main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")
# Does this seem reasonable (...like order of magnitude reasonable)? You can 
# perform a quick and dirty check using google earth and measuring the channel 
# width in a few places.
#
plot(USGS07031650$flowdata$cms,USGS07031650$flowdata$depth_m, 
     xlab = "Flow (cms)",ylab = "Depth (m)",
     main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")


# ck
# USGS07031650$flowdata$ck = ???
# ANS
USGS07031650$flowdata$ck =
  5/3*sqrt(USGS07031650$site$slope)/USGS07031650$site$man_n*
  (USGS07031650$flowdata$depth_m^(2/3))
# USGS07031650$flowdata$dt = ???
USGS07031650$flowdata$dt =
  USGS07031650$site$L/USGS07031650$flowdata$ck

plot(USGS07031650$flowdata$dateTime,USGS07031650$flowdata$dt)
USGS07031650$flowdata$outTime=USGS07031650$flowdata$dateTime+
  USGS07031650$flowdata$dt

# Find beginning of  Waves
USGS07031650$flowdata$newwave=
  USGS07031650$flowdata$cms *1.05 <
  data.table::shift(USGS07031650$flowdata$cms)
summary(USGS07031650$flowdata$newwave)
# Add plot of the point found
len=length(USGS07031650$flowdata$newwave)
USGS07031650$flowdata$newwave[is.na(USGS07031650$flowdata$newwave)]=F
# Removes repeated finds by going through loop backwords
for (i in seq(len,2)){
  print(i)
  if(USGS07031650$flowdata$newwave[i]==T &
     USGS07031650$flowdata$newwave[i-1]==T){
    USGS07031650$flowdata$newwave[i]=F
  }
}
plot(USGS07031650$flowdata$dateTime,USGS07031650$flowdata$cms,type="l")
points(USGS07031650$flowdata$dateTime[USGS07031650$flowdata$newwave],
       USGS07031650$flowdata$cms[USGS07031650$flowdata$newwave],col=2)

# Find the time locations where waves begin
which(USGS07031650$flowdata$newwave == TRUE)
plot(USGS07031650$flowdata$dateTime,USGS07031650$flowdata$cms,
     type="l",xlim=c(USGS07031650$flowdata$dateTime[7172],
                     USGS07031650$flowdata$dateTime[7172+500]),
     xlab="Date", ylab="Flow (cms)", 
     main="WOLF RIVER AT GERMANTOWN, TN to Missippi River at Memphis, TN")
lines(USGS07031650$flowdata$outTime,USGS07031650$flowdata$cms,col=2)

########################################################################
#
A=SpatialPoints(USGS07031692$site)# Up gradient site Lick Run
B=SpatialPoints(USGS07032000$site) # Down gradient site ROA River atNiagara
proj4string(A)=proj4_ll
proj4string(B)=proj4_ll
A_utm=spTransform(A,crs_utm)
B_utm=spTransform(B,crs_utm)
# Cut the DEM down to a more manageable size
cropmydem=raster::crop(mydem,raster::extend(extent(ab_utm),600))
cropmydem=raster::trim(cropmydem)
cropmydem=cropmydem*1000.0
plot(cropmydem)
plot(ab_utm,add=T)
# Set up the weighting functions
altDiff <- function(x){x[2] - x[1]}
hd <- transition(cropmydem, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- raster::adjacent(cropmydem, cells=1:ncell(cropmydem), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
# Find and plot the flow path
AtoB <- shortestPath(Conductance, A_utm, B_utm, output="SpatialLines")
plot(AtoB,add=T)
plot(streams_utm,col="blue",add=T)
plot(AtoB,add=T)
SpatialLinesLengths(AtoB)
USGS07031692$site$L=SpatialLinesLengths(AtoB) # km to m
USGS07031692$site$L # reach length in m
#
#
# Getting slope, we will extract the slope for points A and B from the DEM and # divide the difference by the length in m, this gives us a much better 
# estimate of slope than taking the point slopes at the gage site
#
USGS07031692$site$slope=(raster::extract(mydem,A_utm)-
                             raster::extract(mydem,B_utm))/USGS07031692$site$L
USGS07031692$site$slope


# So now we have flow depth (y "$depth_m"), manning's n ("$man_n"), Q ("$cms"), and slope ("$slope") rearrange to solve for B
# B=(n*Q)/(y^(5/3)*sqrt(So))
USGS07031692$flowdata$B=(USGS07031692$site$man_n*USGS07031692$flowdata$cms)/
  (USGS07031692$flowdata$depth_m^(5/3)*sqrt(USGS07031692$site$slope))
head(USGS07031692$flowdata)
#  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
#1  	USGS 05267000 2017-05-01 04:00:00      	6.38            	A
#2  	USGS 05267000 2017-05-01 04:05:00      	6.38            	A
#  X_00065_00000 X_00065_00000_cd tz_cd   	cms  depth_m    	B
#1      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#2      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#
# Lets look at how B changes with flow.    
plot(USGS07031692$flowdata$dateTime,USGS07031692$flowdata$B, main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")
# Does this seem reasonable (...like order of magnitude reasonable)? You can 
# perform a quick and dirty check using google earth and measuring the channel 
# width in a few places.
#
plot(USGS07031692$flowdata$cms,USGS07031692$flowdata$depth_m-0.8, 
     xlab = "Flow (cms)",ylab = "Depth (m)",
     main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")


# ck
# USGS07031692$flowdata$ck = ???
# ANS
USGS07031692$flowdata$ck =
  5/3*sqrt(USGS07031692$site$slope)/USGS07031692$site$man_n*
  (USGS07031692$flowdata$depth_m^(2/3))
# USGS07031692$flowdata$dt = ???
USGS07031692$flowdata$dt =
  USGS07031692$site$L/USGS07031692$flowdata$ck

plot(USGS07031692$flowdata$dateTime,USGS07031692$flowdata$dt)
USGS07031692$flowdata$outTime=USGS07031692$flowdata$dateTime+
  USGS07031692$flowdata$dt

# Find beginning of  Waves
USGS07031692$flowdata$newwave=
  USGS07031692$flowdata$cms *1.5 <
  data.table::shift(USGS07031692$flowdata$cms)
summary(USGS07031692$flowdata$newwave)
# Add plot of the point found
len=length(USGS07031692$flowdata$newwave)
USGS07031692$flowdata$newwave[is.na(USGS07031692$flowdata$newwave)]=F
# Removes repeated finds by going through loop backwords
for (i in seq(len,2)){
  print(i)
  if(USGS07031692$flowdata$newwave[i]==T &
     USGS07031692$flowdata$newwave[i-1]==T){
    USGS07031692$flowdata$newwave[i]=F
  }
}
plot(USGS07031692$flowdata$dateTime,USGS07031692$flowdata$cms,type="l")
points(USGS07031692$flowdata$dateTime[USGS07031692$flowdata$newwave],
       USGS07031692$flowdata$cms[USGS07031692$flowdata$newwave],col=2)

# Find the time locations where waves begin
which(USGS07031692$flowdata$newwave == TRUE)
plot(USGS07031692$flowdata$dateTime,USGS07031692$flowdata$cms,
     type="l",xlim=c(USGS07031692$flowdata$dateTime[2559],
                     USGS07031692$flowdata$dateTime[2559+500]),
     xlab="Date", ylab="Flow (cms)", 
     main="FLETCHER CREEK AT SYCAMORE VIEW ROAD AT MEMPHIS 
     to Missippi River at Memphis, TN")
lines(USGS07031692$flowdata$outTime,USGS07031692$flowdata$cms,col=2)

#####################################################################
#
A=SpatialPoints(USGS07031740$site)# Up gradient site Lick Run
B=SpatialPoints(USGS07032000$site) # Down gradient site ROA River atNiagara
proj4string(A)=proj4_ll
proj4string(B)=proj4_ll
A_utm=spTransform(A,crs_utm)
B_utm=spTransform(B,crs_utm)
# Cut the DEM down to a more manageable size
cropmydem=raster::crop(mydem,raster::extend(extent(ab_utm),600))
cropmydem=raster::trim(cropmydem)
cropmydem=cropmydem*1000.0
plot(cropmydem)
plot(ab_utm,add=T)
# Set up the weighting functions
altDiff <- function(x){x[2] - x[1]}
hd <- transition(cropmydem, altDiff, 8, symm=FALSE)
slope <- geoCorrection(hd)
adj <- raster::adjacent(cropmydem, cells=1:ncell(cropmydem), pairs=TRUE, directions=8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
Conductance <- geoCorrection(speed)
# Find and plot the flow path
AtoB <- shortestPath(Conductance, A_utm, B_utm, output="SpatialLines")
plot(AtoB,add=T)
plot(streams_utm,col="blue",add=T)
plot(AtoB,add=T)
SpatialLinesLengths(AtoB)
USGS07031740$site$L=SpatialLinesLengths(AtoB) # km to m
USGS07031740$site$L # reach length in m
#
#
# Getting slope, we will extract the slope for points A and B from the DEM and # divide the difference by the length in m, this gives us a much better 
# estimate of slope than taking the point slopes at the gage site
#
USGS07031740$site$slope=(raster::extract(mydem,A_utm)-
                             raster::extract(mydem,B_utm))/USGS07031740$site$L
USGS07031740$site$slope


# So now we have flow depth (y "$depth_m"), manning's n ("$man_n"), Q ("$cms"), and slope ("$slope") rearrange to solve for B
# B=(n*Q)/(y^(5/3)*sqrt(So))
USGS07031740$flowdata$B=(USGS07031740$site$man_n*USGS07031740$flowdata$cms)/
  (USGS07031740$flowdata$depth_m^(5/3)*sqrt(USGS07031740$site$slope))
head(USGS07031740$flowdata)
#  agency_cd	site_no        	dateTime X_00060_00000 X_00060_00000_cd
#1  	USGS 05267000 2017-05-01 04:00:00      	6.38            	A
#2  	USGS 05267000 2017-05-01 04:05:00      	6.38            	A
#  X_00065_00000 X_00065_00000_cd tz_cd   	cms  depth_m    	B
#1      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#2      	2.74            	A   UTC 0.1806816 0.835152 0.103032
#
# Lets look at how B changes with flow.    
plot(USGS07031740$flowdata$dateTime,USGS07031740$flowdata$B, main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")
# Does this seem reasonable (...like order of magnitude reasonable)? You can 
# perform a quick and dirty check using google earth and measuring the channel 
# width in a few places.
#
plot(USGS07031740$flowdata$cms,USGS07031740$flowdata$depth_m-0.8, 
     xlab = "Flow (cms)",ylab = "Depth (m)",
     main="LICK RUN TO ROANOKE RIVER AT NIAGARA, VA")


# ck
# USGS07031740$flowdata$ck = ???
# ANS
USGS07031740$flowdata$ck =
  5/3*sqrt(USGS07031740$site$slope)/USGS07031740$site$man_n*
  (USGS07031740$flowdata$depth_m^(2/3))
# USGS07031740$flowdata$dt = ???
USGS07031740$flowdata$dt =
  USGS07031740$site$L/USGS07031740$flowdata$ck

plot(USGS07031740$flowdata$dateTime,USGS07031740$flowdata$dt)
USGS07031740$flowdata$outTime=USGS07031740$flowdata$dateTime+
  USGS07031740$flowdata$dt

# Find beginning of  Waves
USGS07031740$flowdata$newwave=
  USGS07031740$flowdata$cms *1.08 <
  data.table::shift(USGS07031740$flowdata$cms)
summary(USGS07031740$flowdata$newwave)
# Add plot of the point found
len=length(USGS07031740$flowdata$newwave)
USGS07031740$flowdata$newwave[is.na(USGS07031740$flowdata$newwave)]=F
# Removes repeated finds by going through loop backwords
for (i in seq(len,2)){
  print(i)
  if(USGS07031740$flowdata$newwave[i]==T &
     USGS07031740$flowdata$newwave[i-1]==T){
    USGS07031740$flowdata$newwave[i]=F
  }
}
plot(USGS07031740$flowdata$dateTime,USGS07031740$flowdata$cms,type="l")
points(USGS07031740$flowdata$dateTime[USGS07031740$flowdata$newwave],
       USGS07031740$flowdata$cms[USGS07031740$flowdata$newwave],col=2)

# Find the time locations where waves begin
which(USGS07031740$flowdata$newwave == TRUE)
plot(USGS07031740$flowdata$dateTime,USGS07031740$flowdata$cms,
     type="l",xlim=c(USGS07031740$flowdata$dateTime[3592-100],
                     USGS07031740$flowdata$dateTime[3592+200]),
     xlab="Date", ylab="Flow (cms)", 
     main="WOLF RIVER AT HOLLYWOOD ST AT MEMPHIS, TN 
     to Missippi River at Memphis, TN")
lines(USGS07031740$flowdata$outTime,USGS07031740$flowdata$cms,col=2)
