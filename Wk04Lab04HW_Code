# Kiara Macdonald
# BSE 5304G
# Lab 04

dir.create("~/Week04Lab04/")
setwd("~/Week04Lab04/")
browseURL("https://github.com/vtdrfuka/BSE5304_2022")
url="https://raw.githubusercontent.com/vtdrfuka/BSE5304_2022/main/Lab04.R"
download.file(url,"Lab04.R")

#############################################################################

# Selected Gage: USGS 0422026250 NORTHRUP CREEK AT NORTH GREECE NY
# Latitude 43°15'13",   Longitude 77°44'32"   NAD83
# Monroe County, New York, Hydrologic Unit 04130001
# Drainage area: 10.1 square miles
# Datum of gage: 305.23 feet above   NAVD88.
# wss_aoi_2022-02-13_12-57-13.zip

options(repos ="http://cran.us.r-project.org")  # required to get latest libs
# Installing the packages we will play with today
if (!require("pacman")) install.packages("pacman")
pacman::p_load(elevatr,soilDB,rgdal,raster,aqp,rgeos,sp)
# From previous weeks
pacman::p_load(EcoHydRology,rnoaa,curl,httr)
pacman::p_load(ggplot2,dplyr,patchwork, hrbrthemes)
rm(list=objects())
# 3 Functions to calculate SWE and excess when soil is drying, 
#   wetting, and wetting above capacity
#
browseURL("https://github.com/vtdrfuka/BSE5304_2022/tree/main/functions")
browseURL("https://github.com/vtdrfuka/BSE5304_2022/blob/main/functions/TMWBmodel.R")
browseURL("https://raw.githubusercontent.com/vtdrfuka/BSE5304_2022/main/functions/NSE.R")
source("https://raw.githubusercontent.com/vtdrfuka/BSE5304_2022/main/functions/TMWBmodel.R")

# Download a soils dataset for your basin based on the WebSoilSurvey method 
# and replace this url with your own
url="https://websoilsurvey.sc.egov.usda.gov/DSD/Download/AOI/0zdehlfgqm4z0hhysd3a4a1f/wss_aoi_2022-02-13_12-57-13.zip"
download.file(url,"mysoil.zip")
unzip("mysoil.zip")
# https://cran.r-project.org/web/packages/elevatr/elevatr.pdf
# https://cran.r-project.org/web/packages/raster/raster.pdf
# https://cran.r-project.org/web/packages/soilDB/soilDB.pdf
# https://cran.r-project.org/web/packages/rgdal/rgdal.pdf
# use the function to get data from USGS 0422026250 
# NORTHRUP CREEK AT NORTH GREECE NY
myflowgage_id="0422026250"
myflowgage=get_usgs_gage(myflowgage_id,begin_date = "2015-01-01",end_date = "2022-03-01")
# Note that flow returned is in m3/day, but we want mm/day for the basin
myflowgage$flowdata$Qmm = myflowgage$flowdata$flow/myflowgage$area/10^3

url2="https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/HU8/HighResolution/Shape/NHD_H_04130001_HU8_Shape.zip"
download.file(url2,"NHD_H_04130001_HU8_Shape.zip")
unzip("NHD_H_04130001_HU8_Shape.zip",exdir="04130001")
# Take a quick look at what is included in the NHD dataset
list.files("04130001/Shape/",pattern = "dbf")
streams=readOGR("04130001/Shape/NHDFlowline.dbf")
plot(streams)
mystream=subset(streams,gnis_name=="Northrup Creek")
lines(mystream,col="red")
c(mystream@bbox)
# What is this returning? Why do we care?
mybbox=c(mystream@bbox)

# This needs to be completed based on your download
mysoil=readOGR("wss_aoi_2022-02-13_12-57-13/spatial/soilmu_a_aoi.shp")    
# Explore the mysoil dataset which is returned
head(mysoil@data)
class(mysoil)
#mysoil@
plot(mysoil)
lines(mystream,col="red")
  
# Explore the mysoil dataset which is returned
mybbox=c(mysoil@bbox)

# First associate mukey with cokey from component
unique(mysoil$MUKEY)
mysoil$mukey=mysoil$MUKEY  # or rename the column
mukey_statement = format_SQL_in_statement(unique(mysoil$mukey))
print(mukey_statement)
q_mu2co = paste("SELECT mukey,cokey FROM component WHERE mukey IN ", mukey_statement, sep="")
print(q_mu2co)
mu2co = SDA_query(q_mu2co)
# Second associate cokey with resdept_r,resdepb_r,resthk_r  FROM corestrictions
cokey_statement = format_SQL_in_statement(unique(mu2co$cokey))
q_co2ch = paste("SELECT cokey,resdept_r,resdepb_r,resthk_r  FROM corestrictions WHERE cokey IN ", cokey_statement, sep="")
print(q_co2ch)
co2ch = SDA_query(q_co2ch)
# Last, bring them back together, and aggregate based on max values
# resdept_r,resdepb_r,resthk_r
mu2ch=merge(mu2co,co2ch)
summary(mu2ch)
mu2chmax=aggregate(mu2ch,list(mu2ch$mukey),max)

proj4_ll = "+proj=longlat"
proj4string(mysoil) = proj4_ll
mydem=get_elev_raster(locations=mysoil, 
                      z = 11, prj =proj4string(mysoil) ,
                      src ="aws",clip="bbox",expand = 0.001)

SoilDepth_sf <- fetchSDA_spatial(mu2chmax[,3],
  by.col = "mukey",
  method = "feature",
  geom.src = "mupolygon",
  db = "SSURGO",
)
SoilDepth <- merge(SoilDepth_sf,mu2chmax)
plot(SoilDepth["resdept_r"],add=TRUE,col="grey")
mybbox=c(SoilDepth@bbox)

###################################################
plot(mydem, xlab="Latitude (Deg)", ylab="Longitude (Deg)")
plot(SoilDepth["resdept_r"],add=TRUE,col="grey")
#lines(mysoil,col="black")
lines(mystream,col="red")
title("Northrup Creek DEM and Restrictive Soils")

#########################################################
#########################################################
stns=meteo_distance(
  station_data=ghcnd_stations(),
  lat=myflowgage$declat,
  long=myflowgage$declon,
  units = "deg",
  radius = 30,
  limit = NULL
)
# We are looking for stations with elements that have PRCP, TMAX and TMIN 
# and current data (i.e. Year 2021). 
WXStn=stns[stns$element=="TMAX"&stns$last_year>=2021,]$id[1]
WXData=meteo_pull_monitors(
  monitors=WXStn,
  keep_flags = FALSE,
  date_min = "2016-01-01",
  date_max = NULL,
  var = c("TMAX","TMIN","PRCP") 
)
summary(WXData)  #

# Create an aligned modeldata data frame to build our model in
modeldata=merge(WXData,myflowgage$flowdata,by.x="date",by.y="mdate")
summary(modeldata)  #
modeldata$MaxTemp=modeldata$tmax/10 # Converting to C
modeldata$MinTemp=modeldata$tmin/10 # Converting to C
modeldata$P=modeldata$prcp/10 # Converting to mm
# View(modeldata)  
# Compare your precipitation to the flow out of your basin
modeldata$P[is.na(modeldata$P)]=0
modeldata$MinTemp[is.na(modeldata$MinTemp)]=0
modeldata$MaxTemp[is.na(modeldata$MaxTemp)]=
  modeldata$MinTemp[is.na(modeldata$MaxTemp)] +1
modeldata$MaxTemp[modeldata$MaxTemp<=modeldata$MinTemp]=
  modeldata$MinTemp[modeldata$MaxTemp<=modeldata$MinTemp]+1
modeldata$AvgTemp=(modeldata$MaxTemp+modeldata$MaxTemp)/2.0

summary(modeldata)
modeldata[is.na(modeldata)]=0 # A Quick BUT sloppy removal of NAs
TMWB=modeldata

##########################################################################################
# Last weeks homework example
source("https://raw.githubusercontent.com/vtdrfuka/BSE5304_2022/main/functions/TMWBmodel.R")
# Calibrating the parameters one at a time
for (fcres in seq(.1,.5,.1)){
  TMWBnew=TMWBmodel(TMWB=TMWB,fcres=fcres)
  print(paste(fcres,NSE(TMWBnew$Qmm,TMWBnew$Qpred)))
}
# fcres=.1 is the highest NSE
for (SFTmp in seq(-5,20)){
  TMWBnew=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = SFTmp)
  print(paste(SFTmp,NSE(TMWBnew$Qmm,TMWBnew$Qpred)))
}
# SMTmp=5 is the highest NSE
for(AWCval in seq(5,50,2)){
  TMWBnew=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = 5,Tlag = 1,AWCval = AWCval)
  print(paste(AWCval,NSE(TMWBnew$Qmm,TMWBnew$Qpred)))
}
AWCval = 21
Slope = 
  # Best result for "LICK RUN ABOVE PATTON AVENUE AT ROANOKE, VA" NSE = .34 . 
  TMWBnew=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = 5,Tlag = 1,AWCval = 21)
print(paste(AWCval,NSE(TMWBnew$Qmm,TMWBnew$Qpred))) # AWC = 21cm

# For a simple spatial model, use TMWB, to initialize 3 
# slope components for Top, Mid, and Bottom of the hillside. 
TopSlope=TMWB
MidSlope=TMWB
BotSlope=TMWB

TopSlopeModel=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = 5,Tlag = 1,AWCval = 50.4, Slope = 1.821546e-02)
MidSlopeModel$P = MidSlopeModel$P+TopSlopeModel$Excess #Precipitation with excess uphill runoff
MidSlopeModel=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = 5,Tlag = 1,AWCval = 290, Slope = 2.099999e-01)
BotSlopeModel$P = BotSlopeModel$P+MidSlopeModel$Excess #Precipitation with excess uphill runoff
BotSlopeModel=TMWBmodel(TMWB=TMWB,fcres=.1,SFTmp = 5,Tlag = 1,AWCval = 810, Slope = 6.366099e-03)



#########################################################################################

AW_Graph <- ggplot()+
  geom_line(data=TopSlopeModel,aes(x=date,y=AW,color="Top Slope"))+
  geom_line(data=MidSlopeModel,aes(x=date,y=AW,color="Middle Slope"))+
  geom_line(data=BotSlopeModel,aes(x=date,y=AW,color="Bottom Slope"))+
  scale_colour_manual("", values=c("Bottom Slope" = "red", "Middle Slope" = "blue", "Top Slope" = "black")) +
  ggtitle("AW and Excess on a Hillslope") 
ExcessGraph <-ggplot()+
  geom_line(data=TopSlopeModel,aes(x=date,y=Excess,color="Top Slope"))+
  geom_line(data=MidSlopeModel,aes(x=date,y=Excess,color="Middle Slope"))+
  geom_line(data=BotSlopeModel,aes(x=date,y=Excess,color="Bottom Slope"))+
  scale_colour_manual("", values=c("Bottom Slope" = "red", "Middle Slope" = "blue", "Top Slope" = "black")) 

AW_Graph+ExcessGraph+ plot_layout(ncol = 1, widths = c(1, 2))
